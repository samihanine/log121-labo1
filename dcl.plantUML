@startuml DCL

package assets {
    interface Asset {
        +getX(): int
        +getY(): int
        +setX(x: int): void
        +setY(y: int): void
        +getIcon(): String
    }

    class Chemin {
        -int departId
        -int arriveeId
        -List data
        +Chemin(int departId, int arriveeId)
        +int getDepartId()
        +int getArriveeId()
        +void setDepartId(int departId)
        +void setArriveeId(int arriveeId)
    }

    class Composant {
        -String type
        -int quantite
        +Composant(String type, int quantite)
        +String getType()
        +void setType(String type)
        +int getQuantite()
        +void setQuantite(int quantite)
    }

    class UsineType {
        - type: String
        - iconeVide: String
        - inconeUnTiers: String
        - inconDeuxTiers: String
        - iconPlein: String
        - intervalProduction: int
        - inventaire: List<Inventaire>
        - composantSortie: String
        - etat: int
        - time: double
        + data: List<UsineType>
        + UsineType(type: String, iconeVide: String, inconeUnTiers: String, inconDeuxTiers: String, iconPlein: String, intervalProduction: int, inventaire: List<Inventaire>, composantSortie: String)
        + UsineType(template: UsineType)
        + static getUsineTypeByType(type: String): UsineType
        + getInventaireItem(composantType: String): Inventaire
        + ajouterInventaire(composantType: String): boolean
        + retirerInventaire(composantType: String): boolean
    }

    class Usine {
        -int id
        -int x
        -int y
        {static} - List data
        +Usine(int id, int x, int y, String iconeVide, String inconeUnTiers, String inconDeuxTiers, String iconPlein, List<Composant> entrees, int intervalProduction, List<Composant> sorties)
        +Usine(UsineType template, int id, int x, int y)
        +static Usine getUsineById(int id)
    }

    class Entrepot {
        - sujet: Sujet
        + Entrepot(template: UsineType, id: int, x: int, y: int)
        + getSujet(): Sujet
        + vendre(): boolean
        + update(): void
        + setEtat(etat: int): void
    }

    class Inventaire {
        - quantite: int = 0
        - quantiteRequise: int = 0
        - composantType: String
        + Inventaire(composantType: String, quantiteRequise: int)
    }
}


package simulation {

    class Simulation {
    + static void main(String[])
    }

    class Environnement {
    - boolean actif
    - int DELAI
    + void doInBackground()
    + void firePropertyChange(String, Object, Object)
    }

    class LecteurXML {
    + void lecture()
    - void simulationCreation()
    - void templatesCreation()
    }

}

package menu {
    class FenetrePrincipale {
        {static} - long serialVersionUID
        {static} - String TITRE_FENETRE
        {static} - Dimension DIMENSION
        + FenetrePrincipale()
        + void propertyChange(PropertyChangeEvent)
    }

    class FenetreStrategie {
        {static} - long serialVersionUID
        {static} - String TITRE_FENETRE
        {static} - Dimension DIMENSION 
        - PanneauStrategie panneauStrategie
        + FenetreStrategie()
    }

    class MenuFenetre {
    + MenuFenetre()
    + void ajouterMenuFichier()
    + void ajouterMenuSimulation()
    + void ajouterMenuAide()
    }

    class PanneauPrincipal {
    - static final long serialVersionUID = 1L
    + void paint(Graphics)
    }

    class PanneauStrategie {
    - static final long serialVersionUID = 1L
    + PanneauStrategie()
    }
}




package observateur {
    class Sujet {
        - listeObservateur: List
        - etat : int 
        + attache(ObservateurEntrepot: o)
        + detache(o: ObservateurEntrepot)
        + notifierObservateurs()
        + getEtat()
        + setEtat(etat: int)
    }

    interface Observateur {
        + void update(Subject)
    }

    class ObservateurEntrepot {
        + ObservateurEntrepot(Subject sujet)
        + void update(Subject)
        + int getEtat()
    }
}

package strategie {

    interface ContexteStrategie {
        {static} - Strategie strategie
        {static} + void update()
        {static} + void setStrategie(Strategie)
        {static} + Strategie getStrategie()
    }

    interface Strategie {
        + void update()
    }

    class StrategieFixe {
        + void update()
    }

    class StrategieAleatoire {
        + void update()
    }

}


Environnement --- FenetrePrincipale
FenetrePrincipale --- FenetreStrategie
FenetrePrincipale --- MenuFenetre
FenetrePrincipale --- PanneauPrincipal
FenetreStrategie --- PanneauStrategie
Simulation --> FenetrePrincipale
UsineType <|-- Usine
Usine <|-- Entrepot
MenuFenetre --> LecteurXML
Usine "0" *-- "*" Inventaire
Inventaire "0" *-- "*" Composant

PanneauPrincipal --> Usine
PanneauPrincipal --> Chemin

ObservateurEntrepot ..|> Observateur
Entrepot --> Sujet
Observateur --- Sujet
Entrepot --- Sujet
ObservateurEntrepot --> Usine

StrategieFixe ..|> Strategie
StrategieAleatoire ..|> Strategie
ContexteStrategie --- Strategie
PanneauStrategie --- ContexteStrategie
@enduml